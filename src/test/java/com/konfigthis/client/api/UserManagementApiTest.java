/*
 * Visier User Management APIs
 * Visier APIs for managing users within an organization
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AllUsersGetAPIResponseDTO;
import com.konfigthis.client.model.AssignRevokePermissionsRequest;
import com.konfigthis.client.model.AssignRevokePermissionsResponseDTO;
import java.io.File;
import com.konfigthis.client.model.Permission;
import com.konfigthis.client.model.PermissionAssignedUsersDTO;
import com.konfigthis.client.model.PermissionsToUserGroupForTenantDTO;
import com.konfigthis.client.model.PermissionsToUserGroupRequestDTO;
import com.konfigthis.client.model.PermissionsToUserGroupsRequestDTO;
import com.konfigthis.client.model.SecurityAssignmentResponseDTO;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.UserCreationAPIRequestDTO;
import com.konfigthis.client.model.UserCreationAPIResponseDTO;
import com.konfigthis.client.model.UserGetAPIResponseDTO;
import com.konfigthis.client.model.UserGroupsGetAPIResponseDTO;
import com.konfigthis.client.model.UserGroupsUsersDTO;
import com.konfigthis.client.model.UserUpdateAPIRequestDTO;
import com.konfigthis.client.model.UsersToUserGroupRequestDTO;
import com.konfigthis.client.model.UsersToUserGroupsRequestDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserManagementApi
 */
@Disabled
public class UserManagementApiTest {

    private static UserManagementApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UserManagementApi(apiClient);
    }

    /**
     * Add a user
     *
     * This API allows you to create a new user. Administrating tenant users can specify the tenant in which to add a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserTest() throws ApiException {
        String username = null;
        String displayName = null;
        String employeeId = null;
        String accountEnabled = null;
        String email = null;
        String tenantCode = null;
        UserCreationAPIResponseDTO response = api.addUser()
                .username(username)
                .displayName(displayName)
                .employeeId(employeeId)
                .accountEnabled(accountEnabled)
                .email(email)
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Assign users to user groups
     *
     * This API allows you to assign users to specific user groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUsersToUserGroupTest() throws ApiException {
        List<UsersToUserGroupRequestDTO> userGroups = null;
        SecurityAssignmentResponseDTO response = api.addUsersToUserGroup()
                .userGroups(userGroups)
                .execute();
        // TODO: test validations
    }

    /**
     * Assign permissions to users
     *
     * This API allows you to assign a permission to specific users. Administrating tenant users can assign permissions  to users in the administrating tenant and in the analytic tenants those users belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignPermissionsTest() throws ApiException {
        List<Permission> permissions = null;
        AssignRevokePermissionsResponseDTO response = api.assignPermissions()
                .permissions(permissions)
                .execute();
        // TODO: test validations
    }

    /**
     * Assign permissions to user groups
     *
     * This API allows you to assign a permission to specific user groups. This assigns the permission to all users in the user group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignPermissionsToUserGroupsTest() throws ApiException {
        List<PermissionsToUserGroupRequestDTO> userGroups = null;
        PermissionsToUserGroupForTenantDTO response = api.assignPermissionsToUserGroups()
                .userGroups(userGroups)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userId = null;
        String tenantCode = null;
        Object response = api.deleteUser(userId)
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of all permissions in XLSX format
     *
     * This API allows you to export the list of permissions in a tenant. This report includes the permission name,  permission description, and permission ID for all permissions in the tenant.   Administrating tenant users can export permissions lists for the administrating tenant and the analytic tenants  those users belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPermissionsXLSXTest() throws ApiException {
        String tenantCode = null;
        File response = api.getAllPermissionsXLSX()
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of all user groups
     *
     * This API allows you to retrieve the full list of user groups in a tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserGroupsTest() throws ApiException {
        String tenantCode = null;
        Integer limit = null;
        Integer start = null;
        UserGroupsGetAPIResponseDTO response = api.getAllUserGroups()
                .tenantCode(tenantCode)
                .limit(limit)
                .start(start)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of all users
     *
     * This API allows you to retrieve the full list of users and their current states.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUsersTest() throws ApiException {
        String tenantCode = null;
        Boolean assignedProfiles = null;
        Boolean assignedPermissions = null;
        Boolean assignedUserGroups = null;
        Integer limit = null;
        Integer start = null;
        AllUsersGetAPIResponseDTO response = api.getAllUsers()
                .tenantCode(tenantCode)
                .assignedProfiles(assignedProfiles)
                .assignedPermissions(assignedPermissions)
                .assignedUserGroups(assignedUserGroups)
                .limit(limit)
                .start(start)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the Application Logs
     *
     * This API allows you to export the Application Logs for a tenant. The Application Logs track information about your  users and how they are using the application. Performing regular audits will help you identify potential security  issues and keep your data safe. As part of user management, download the Application Logs to monitor user activity  and logon events to ensure your users are performing authorized activities.   Administrating tenant users can export application logs for the administrating tenant and the analytic tenants  those users belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationLogsXLSXTest() throws ApiException {
        String startTime = null;
        String endTime = null;
        String tenantCode = null;
        File response = api.getApplicationLogsXLSX()
                .startTime(startTime)
                .endTime(endTime)
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the Data Security Report
     *
     * This API allows you to export the data security report of a user. The Data Security Report provides information  about a specific user to see which populations and properties that user has access to as a result of the  permissions assigned to them.   Administrating tenant users can export the report for users in the administrating tenant and the analytic  tenants those users belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSecurityReportXLSXTest() throws ApiException {
        String userId = null;
        String tenantCode = null;
        File response = api.getDataSecurityReportXLSX(userId)
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve users that are assigned a specific permission
     *
     * This API allows you to retrieve all the users that are assigned a specified permission. You must know the ID  of the permission you want to retrieve users for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPermissionAssignedUsersTest() throws ApiException {
        String permissionId = null;
        Boolean includeUserGroups = null;
        String tenantFilter = null;
        Integer limit = null;
        Integer start = null;
        PermissionAssignedUsersDTO response = api.getPermissionAssignedUsers(permissionId)
                .includeUserGroups(includeUserGroups)
                .tenantFilter(tenantFilter)
                .limit(limit)
                .start(start)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve user profile assignments in XLSX format
     *
     * This API allows you to export the profiles assigned to each user. This report details the profiles assigned to  each user and the profile validity period.   Administrating tenant users can export profile assignments for the administrating tenant and the analytic tenants  those users belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileAssignmentsXLSXTest() throws ApiException {
        String tenantCode = null;
        File response = api.getProfileAssignmentsXLSX()
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a user&#39;s details
     *
     * This API allows you to retrieve all details for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserDetailTest() throws ApiException {
        String userId = null;
        String tenantCode = null;
        Boolean assignedProfiles = null;
        Boolean assignedPermissions = null;
        Boolean assignedUserGroups = null;
        UserGetAPIResponseDTO response = api.getUserDetail(userId)
                .tenantCode(tenantCode)
                .assignedProfiles(assignedProfiles)
                .assignedPermissions(assignedPermissions)
                .assignedUserGroups(assignedUserGroups)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of user group users
     *
     * This API allows you to retrieve the list of users explicitly assigned to a user group. Users that are implicitly  included in the user group through the user group&#39;s dynamic filters are not returned by this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserGroupUsersTest() throws ApiException {
        String userGroupId = null;
        String tenantFilter = null;
        Integer limit = null;
        Integer start = null;
        UserGroupsUsersDTO response = api.getUserGroupUsers(userGroupId)
                .tenantFilter(tenantFilter)
                .limit(limit)
                .start(start)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve user permissions in XLSX format
     *
     * This API allows you to export the user permission assignments for a tenant. The permission assignments report  provides a summary of the permissions your users have been assigned and how each permission is being used across  your user base, as well as the users that do not have any permissions assigned to them.   Administrating tenant users can export permission assignments for the administrating tenant and the analytic  tenants those users belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPermissionsXLSXTest() throws ApiException {
        String tenantCode = null;
        File response = api.getUserPermissionsXLSX()
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove permissions from users
     *
     * This API allows you to remove a permission from specific users. Administrating tenant users can remove permissions  from users in the administrating tenant and in the analytic tenants those users belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removePermissionsTest() throws ApiException {
        List<Permission> permissions = null;
        AssignRevokePermissionsResponseDTO response = api.removePermissions()
                .permissions(permissions)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove users from user groups
     *
     * This API allows you to remove users from specific user groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUsersFromUserGroupTest() throws ApiException {
        List<UsersToUserGroupRequestDTO> userGroups = null;
        SecurityAssignmentResponseDTO response = api.removeUsersFromUserGroup()
                .userGroups(userGroups)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove permissions from user groups
     *
     * This API allows you to remove a permission from specific user groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokePermissionsFromUserGroupsTest() throws ApiException {
        List<PermissionsToUserGroupRequestDTO> userGroups = null;
        PermissionsToUserGroupForTenantDTO response = api.revokePermissionsFromUserGroups()
                .userGroups(userGroups)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * This API allows you to update an existing user&#39;s information, such as their display name or if the user is enabled in Visier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String userId = null;
        String displayName = null;
        String employeeId = null;
        String accountEnabled = null;
        String email = null;
        String tenantCode = null;
        UserUpdateAPIRequestDTO response = api.updateUser(userId)
                .displayName(displayName)
                .employeeId(employeeId)
                .accountEnabled(accountEnabled)
                .email(email)
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

}
