/*
 * Visier User Management APIs
 * Visier APIs for managing users within an organization
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AllUsersGetAPIResponseDTO;
import com.konfigthis.client.model.AssignRevokePermissionsRequest;
import com.konfigthis.client.model.AssignRevokePermissionsResponseDTO;
import java.io.File;
import com.konfigthis.client.model.Permission;
import com.konfigthis.client.model.PermissionAssignedUsersDTO;
import com.konfigthis.client.model.PermissionsToUserGroupForTenantDTO;
import com.konfigthis.client.model.PermissionsToUserGroupRequestDTO;
import com.konfigthis.client.model.PermissionsToUserGroupsRequestDTO;
import com.konfigthis.client.model.SecurityAssignmentResponseDTO;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.UserCreationAPIRequestDTO;
import com.konfigthis.client.model.UserCreationAPIResponseDTO;
import com.konfigthis.client.model.UserGetAPIResponseDTO;
import com.konfigthis.client.model.UserGroupsGetAPIResponseDTO;
import com.konfigthis.client.model.UserGroupsUsersDTO;
import com.konfigthis.client.model.UserUpdateAPIRequestDTO;
import com.konfigthis.client.model.UsersToUserGroupRequestDTO;
import com.konfigthis.client.model.UsersToUserGroupsRequestDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addUserCall(UserCreationAPIRequestDTO userCreationAPIRequestDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userCreationAPIRequestDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserValidateBeforeCall(UserCreationAPIRequestDTO userCreationAPIRequestDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userCreationAPIRequestDTO' is set
        if (userCreationAPIRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'userCreationAPIRequestDTO' when calling addUser(Async)");
        }

        return addUserCall(userCreationAPIRequestDTO, tenantCode, _callback);

    }


    private ApiResponse<UserCreationAPIResponseDTO> addUserWithHttpInfo(UserCreationAPIRequestDTO userCreationAPIRequestDTO, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = addUserValidateBeforeCall(userCreationAPIRequestDTO, tenantCode, null);
        Type localVarReturnType = new TypeToken<UserCreationAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addUserAsync(UserCreationAPIRequestDTO userCreationAPIRequestDTO, String tenantCode, final ApiCallback<UserCreationAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserValidateBeforeCall(userCreationAPIRequestDTO, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<UserCreationAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddUserRequestBuilder {
        private String username;
        private String displayName;
        private String employeeId;
        private String accountEnabled;
        private String email;
        private String tenantCode;

        private AddUserRequestBuilder() {
        }

        /**
         * Set username
         * @param username The user&#39;s username. This is typically the user&#39;s email, such as john@visier.com. (optional)
         * @return AddUserRequestBuilder
         */
        public AddUserRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName An identifiable name to display within Visier. For example, \\\&quot;John Smith\\\&quot;. (optional)
         * @return AddUserRequestBuilder
         */
        public AddUserRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId If applicable, and if available, the user employee ID in the data. (optional)
         * @return AddUserRequestBuilder
         */
        public AddUserRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set accountEnabled
         * @param accountEnabled If false, the user account is disabled. (optional)
         * @return AddUserRequestBuilder
         */
        public AddUserRequestBuilder accountEnabled(String accountEnabled) {
            this.accountEnabled = accountEnabled;
            return this;
        }
        
        /**
         * Set email
         * @param email The user&#39;s email. This is used if the user&#39;s email is different from their username. For example, \\\&quot;john.doe@visier.com\\\&quot;. (optional)
         * @return AddUserRequestBuilder
         */
        public AddUserRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to create a user in. (optional)
         * @return AddUserRequestBuilder
         */
        public AddUserRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for addUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserCreationAPIRequestDTO userCreationAPIRequestDTO = buildBodyParams();
            return addUserCall(userCreationAPIRequestDTO, tenantCode, _callback);
        }

        private UserCreationAPIRequestDTO buildBodyParams() {
            UserCreationAPIRequestDTO userCreationAPIRequestDTO = new UserCreationAPIRequestDTO();
            userCreationAPIRequestDTO.username(this.username);
            userCreationAPIRequestDTO.displayName(this.displayName);
            userCreationAPIRequestDTO.employeeId(this.employeeId);
            userCreationAPIRequestDTO.accountEnabled(this.accountEnabled);
            userCreationAPIRequestDTO.email(this.email);
            return userCreationAPIRequestDTO;
        }

        /**
         * Execute addUser request
         * @return UserCreationAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public UserCreationAPIResponseDTO execute() throws ApiException {
            UserCreationAPIRequestDTO userCreationAPIRequestDTO = buildBodyParams();
            ApiResponse<UserCreationAPIResponseDTO> localVarResp = addUserWithHttpInfo(userCreationAPIRequestDTO, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addUser request with HTTP info returned
         * @return ApiResponse&lt;UserCreationAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserCreationAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            UserCreationAPIRequestDTO userCreationAPIRequestDTO = buildBodyParams();
            return addUserWithHttpInfo(userCreationAPIRequestDTO, tenantCode);
        }

        /**
         * Execute addUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserCreationAPIResponseDTO> _callback) throws ApiException {
            UserCreationAPIRequestDTO userCreationAPIRequestDTO = buildBodyParams();
            return addUserAsync(userCreationAPIRequestDTO, tenantCode, _callback);
        }
    }

    /**
     * Add a user
     * This API allows you to create a new user. Administrating tenant users can specify the tenant in which to add a user.
     * @param userCreationAPIRequestDTO  (required)
     * @return AddUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AddUserRequestBuilder addUser() throws IllegalArgumentException {
        return new AddUserRequestBuilder();
    }
    private okhttp3.Call addUsersToUserGroupCall(UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersToUserGroupsRequestDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/user-groups/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUsersToUserGroupValidateBeforeCall(UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersToUserGroupsRequestDTO' is set
        if (usersToUserGroupsRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'usersToUserGroupsRequestDTO' when calling addUsersToUserGroup(Async)");
        }

        return addUsersToUserGroupCall(usersToUserGroupsRequestDTO, _callback);

    }


    private ApiResponse<SecurityAssignmentResponseDTO> addUsersToUserGroupWithHttpInfo(UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = addUsersToUserGroupValidateBeforeCall(usersToUserGroupsRequestDTO, null);
        Type localVarReturnType = new TypeToken<SecurityAssignmentResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addUsersToUserGroupAsync(UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO, final ApiCallback<SecurityAssignmentResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUsersToUserGroupValidateBeforeCall(usersToUserGroupsRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<SecurityAssignmentResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddUsersToUserGroupRequestBuilder {
        private List<UsersToUserGroupRequestDTO> userGroups;

        private AddUsersToUserGroupRequestBuilder() {
        }

        /**
         * Set userGroups
         * @param userGroups A list of objects representing the user groups and users to assign or remove. (optional)
         * @return AddUsersToUserGroupRequestBuilder
         */
        public AddUsersToUserGroupRequestBuilder userGroups(List<UsersToUserGroupRequestDTO> userGroups) {
            this.userGroups = userGroups;
            return this;
        }
        
        /**
         * Build call for addUsersToUserGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO = buildBodyParams();
            return addUsersToUserGroupCall(usersToUserGroupsRequestDTO, _callback);
        }

        private UsersToUserGroupsRequestDTO buildBodyParams() {
            UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO = new UsersToUserGroupsRequestDTO();
            usersToUserGroupsRequestDTO.userGroups(this.userGroups);
            return usersToUserGroupsRequestDTO;
        }

        /**
         * Execute addUsersToUserGroup request
         * @return SecurityAssignmentResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public SecurityAssignmentResponseDTO execute() throws ApiException {
            UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO = buildBodyParams();
            ApiResponse<SecurityAssignmentResponseDTO> localVarResp = addUsersToUserGroupWithHttpInfo(usersToUserGroupsRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addUsersToUserGroup request with HTTP info returned
         * @return ApiResponse&lt;SecurityAssignmentResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SecurityAssignmentResponseDTO> executeWithHttpInfo() throws ApiException {
            UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO = buildBodyParams();
            return addUsersToUserGroupWithHttpInfo(usersToUserGroupsRequestDTO);
        }

        /**
         * Execute addUsersToUserGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SecurityAssignmentResponseDTO> _callback) throws ApiException {
            UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO = buildBodyParams();
            return addUsersToUserGroupAsync(usersToUserGroupsRequestDTO, _callback);
        }
    }

    /**
     * Assign users to user groups
     * This API allows you to assign users to specific user groups.
     * @param usersToUserGroupsRequestDTO  (required)
     * @return AddUsersToUserGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AddUsersToUserGroupRequestBuilder addUsersToUserGroup() throws IllegalArgumentException {
        return new AddUsersToUserGroupRequestBuilder();
    }
    private okhttp3.Call assignPermissionsCall(AssignRevokePermissionsRequest assignRevokePermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignRevokePermissionsRequest;

        // create path and map variables
        String localVarPath = "/v1/admin/permissions/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignPermissionsValidateBeforeCall(AssignRevokePermissionsRequest assignRevokePermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assignRevokePermissionsRequest' is set
        if (assignRevokePermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'assignRevokePermissionsRequest' when calling assignPermissions(Async)");
        }

        return assignPermissionsCall(assignRevokePermissionsRequest, _callback);

    }


    private ApiResponse<AssignRevokePermissionsResponseDTO> assignPermissionsWithHttpInfo(AssignRevokePermissionsRequest assignRevokePermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = assignPermissionsValidateBeforeCall(assignRevokePermissionsRequest, null);
        Type localVarReturnType = new TypeToken<AssignRevokePermissionsResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignPermissionsAsync(AssignRevokePermissionsRequest assignRevokePermissionsRequest, final ApiCallback<AssignRevokePermissionsResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignPermissionsValidateBeforeCall(assignRevokePermissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<AssignRevokePermissionsResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignPermissionsRequestBuilder {
        private List<Permission> permissions;

        private AssignPermissionsRequestBuilder() {
        }

        /**
         * Set permissions
         * @param permissions A list of objects representing the permissions to assign to or remove from users. (optional)
         * @return AssignPermissionsRequestBuilder
         */
        public AssignPermissionsRequestBuilder permissions(List<Permission> permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Build call for assignPermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AssignRevokePermissionsRequest assignRevokePermissionsRequest = buildBodyParams();
            return assignPermissionsCall(assignRevokePermissionsRequest, _callback);
        }

        private AssignRevokePermissionsRequest buildBodyParams() {
            AssignRevokePermissionsRequest assignRevokePermissionsRequest = new AssignRevokePermissionsRequest();
            assignRevokePermissionsRequest.permissions(this.permissions);
            return assignRevokePermissionsRequest;
        }

        /**
         * Execute assignPermissions request
         * @return AssignRevokePermissionsResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public AssignRevokePermissionsResponseDTO execute() throws ApiException {
            AssignRevokePermissionsRequest assignRevokePermissionsRequest = buildBodyParams();
            ApiResponse<AssignRevokePermissionsResponseDTO> localVarResp = assignPermissionsWithHttpInfo(assignRevokePermissionsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignPermissions request with HTTP info returned
         * @return ApiResponse&lt;AssignRevokePermissionsResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssignRevokePermissionsResponseDTO> executeWithHttpInfo() throws ApiException {
            AssignRevokePermissionsRequest assignRevokePermissionsRequest = buildBodyParams();
            return assignPermissionsWithHttpInfo(assignRevokePermissionsRequest);
        }

        /**
         * Execute assignPermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssignRevokePermissionsResponseDTO> _callback) throws ApiException {
            AssignRevokePermissionsRequest assignRevokePermissionsRequest = buildBodyParams();
            return assignPermissionsAsync(assignRevokePermissionsRequest, _callback);
        }
    }

    /**
     * Assign permissions to users
     * This API allows you to assign a permission to specific users. Administrating tenant users can assign permissions  to users in the administrating tenant and in the analytic tenants those users belong to.
     * @param assignRevokePermissionsRequest  (required)
     * @return AssignPermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AssignPermissionsRequestBuilder assignPermissions() throws IllegalArgumentException {
        return new AssignPermissionsRequestBuilder();
    }
    private okhttp3.Call assignPermissionsToUserGroupsCall(PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionsToUserGroupsRequestDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/user-groups/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignPermissionsToUserGroupsValidateBeforeCall(PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'permissionsToUserGroupsRequestDTO' is set
        if (permissionsToUserGroupsRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'permissionsToUserGroupsRequestDTO' when calling assignPermissionsToUserGroups(Async)");
        }

        return assignPermissionsToUserGroupsCall(permissionsToUserGroupsRequestDTO, _callback);

    }


    private ApiResponse<PermissionsToUserGroupForTenantDTO> assignPermissionsToUserGroupsWithHttpInfo(PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = assignPermissionsToUserGroupsValidateBeforeCall(permissionsToUserGroupsRequestDTO, null);
        Type localVarReturnType = new TypeToken<PermissionsToUserGroupForTenantDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignPermissionsToUserGroupsAsync(PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO, final ApiCallback<PermissionsToUserGroupForTenantDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignPermissionsToUserGroupsValidateBeforeCall(permissionsToUserGroupsRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<PermissionsToUserGroupForTenantDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignPermissionsToUserGroupsRequestBuilder {
        private List<PermissionsToUserGroupRequestDTO> userGroups;

        private AssignPermissionsToUserGroupsRequestBuilder() {
        }

        /**
         * Set userGroups
         * @param userGroups A list of objects representing the user groups and permissions to assign or remove. (optional)
         * @return AssignPermissionsToUserGroupsRequestBuilder
         */
        public AssignPermissionsToUserGroupsRequestBuilder userGroups(List<PermissionsToUserGroupRequestDTO> userGroups) {
            this.userGroups = userGroups;
            return this;
        }
        
        /**
         * Build call for assignPermissionsToUserGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO = buildBodyParams();
            return assignPermissionsToUserGroupsCall(permissionsToUserGroupsRequestDTO, _callback);
        }

        private PermissionsToUserGroupsRequestDTO buildBodyParams() {
            PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO = new PermissionsToUserGroupsRequestDTO();
            permissionsToUserGroupsRequestDTO.userGroups(this.userGroups);
            return permissionsToUserGroupsRequestDTO;
        }

        /**
         * Execute assignPermissionsToUserGroups request
         * @return PermissionsToUserGroupForTenantDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PermissionsToUserGroupForTenantDTO execute() throws ApiException {
            PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO = buildBodyParams();
            ApiResponse<PermissionsToUserGroupForTenantDTO> localVarResp = assignPermissionsToUserGroupsWithHttpInfo(permissionsToUserGroupsRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignPermissionsToUserGroups request with HTTP info returned
         * @return ApiResponse&lt;PermissionsToUserGroupForTenantDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionsToUserGroupForTenantDTO> executeWithHttpInfo() throws ApiException {
            PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO = buildBodyParams();
            return assignPermissionsToUserGroupsWithHttpInfo(permissionsToUserGroupsRequestDTO);
        }

        /**
         * Execute assignPermissionsToUserGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionsToUserGroupForTenantDTO> _callback) throws ApiException {
            PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO = buildBodyParams();
            return assignPermissionsToUserGroupsAsync(permissionsToUserGroupsRequestDTO, _callback);
        }
    }

    /**
     * Assign permissions to user groups
     * This API allows you to assign a permission to specific user groups. This assigns the permission to all users in the user group.
     * @param permissionsToUserGroupsRequestDTO  (required)
     * @return AssignPermissionsToUserGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AssignPermissionsToUserGroupsRequestBuilder assignPermissionsToUserGroups() throws IllegalArgumentException {
        return new AssignPermissionsToUserGroupsRequestBuilder();
    }
    private okhttp3.Call deleteUserCall(String userId, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String userId, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }

        return deleteUserCall(userId, tenantCode, _callback);

    }


    private ApiResponse<Object> deleteUserWithHttpInfo(String userId, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, tenantCode, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteUserAsync(String userId, String tenantCode, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteUserRequestBuilder {
        private final String userId;
        private String tenantCode;

        private DeleteUserRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to delete a user in. (optional)
         * @return DeleteUserRequestBuilder
         */
        public DeleteUserRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for deleteUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserCall(userId, tenantCode, _callback);
        }


        /**
         * Execute deleteUser request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteUserWithHttpInfo(userId, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteUser request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteUserWithHttpInfo(userId, tenantCode);
        }

        /**
         * Execute deleteUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteUserAsync(userId, tenantCode, _callback);
        }
    }

    /**
     * Delete a user
     * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.
     * @param userId The ID of the user you want to delete. (required)
     * @return DeleteUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserRequestBuilder deleteUser(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new DeleteUserRequestBuilder(userId);
    }
    private okhttp3.Call getAllPermissionsXLSXCall(String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/users/reports/permissions-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/vnd.ms-excel",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPermissionsXLSXValidateBeforeCall(String tenantCode, final ApiCallback _callback) throws ApiException {
        return getAllPermissionsXLSXCall(tenantCode, _callback);

    }


    private ApiResponse<File> getAllPermissionsXLSXWithHttpInfo(String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = getAllPermissionsXLSXValidateBeforeCall(tenantCode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPermissionsXLSXAsync(String tenantCode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPermissionsXLSXValidateBeforeCall(tenantCode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPermissionsXLSXRequestBuilder {
        private String tenantCode;

        private GetAllPermissionsXLSXRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve permissions from. (optional)
         * @return GetAllPermissionsXLSXRequestBuilder
         */
        public GetAllPermissionsXLSXRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for getAllPermissionsXLSX
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPermissionsXLSXCall(tenantCode, _callback);
        }


        /**
         * Execute getAllPermissionsXLSX request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getAllPermissionsXLSXWithHttpInfo(tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPermissionsXLSX request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getAllPermissionsXLSXWithHttpInfo(tenantCode);
        }

        /**
         * Execute getAllPermissionsXLSX request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getAllPermissionsXLSXAsync(tenantCode, _callback);
        }
    }

    /**
     * Retrieve a list of all permissions in XLSX format
     * This API allows you to export the list of permissions in a tenant. This report includes the permission name,  permission description, and permission ID for all permissions in the tenant.   Administrating tenant users can export permissions lists for the administrating tenant and the analytic tenants  those users belong to.
     * @return GetAllPermissionsXLSXRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPermissionsXLSXRequestBuilder getAllPermissionsXLSX() throws IllegalArgumentException {
        return new GetAllPermissionsXLSXRequestBuilder();
    }
    private okhttp3.Call getAllUserGroupsCall(String tenantCode, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/user-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUserGroupsValidateBeforeCall(String tenantCode, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        return getAllUserGroupsCall(tenantCode, limit, start, _callback);

    }


    private ApiResponse<UserGroupsGetAPIResponseDTO> getAllUserGroupsWithHttpInfo(String tenantCode, Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = getAllUserGroupsValidateBeforeCall(tenantCode, limit, start, null);
        Type localVarReturnType = new TypeToken<UserGroupsGetAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUserGroupsAsync(String tenantCode, Integer limit, Integer start, final ApiCallback<UserGroupsGetAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUserGroupsValidateBeforeCall(tenantCode, limit, start, _callback);
        Type localVarReturnType = new TypeToken<UserGroupsGetAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUserGroupsRequestBuilder {
        private String tenantCode;
        private Integer limit;
        private Integer start;

        private GetAllUserGroupsRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve the list of user groups from. (optional)
         * @return GetAllUserGroupsRequestBuilder
         */
        public GetAllUserGroupsRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results to return. The maximum number of users to retrieve is 1000. (optional)
         * @return GetAllUserGroupsRequestBuilder
         */
        public GetAllUserGroupsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. (optional)
         * @return GetAllUserGroupsRequestBuilder
         */
        public GetAllUserGroupsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for getAllUserGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUserGroupsCall(tenantCode, limit, start, _callback);
        }


        /**
         * Execute getAllUserGroups request
         * @return UserGroupsGetAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public UserGroupsGetAPIResponseDTO execute() throws ApiException {
            ApiResponse<UserGroupsGetAPIResponseDTO> localVarResp = getAllUserGroupsWithHttpInfo(tenantCode, limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUserGroups request with HTTP info returned
         * @return ApiResponse&lt;UserGroupsGetAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserGroupsGetAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getAllUserGroupsWithHttpInfo(tenantCode, limit, start);
        }

        /**
         * Execute getAllUserGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserGroupsGetAPIResponseDTO> _callback) throws ApiException {
            return getAllUserGroupsAsync(tenantCode, limit, start, _callback);
        }
    }

    /**
     * Retrieve a list of all user groups
     * This API allows you to retrieve the full list of user groups in a tenant.
     * @return GetAllUserGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUserGroupsRequestBuilder getAllUserGroups() throws IllegalArgumentException {
        return new GetAllUserGroupsRequestBuilder();
    }
    private okhttp3.Call getAllUsersCall(String tenantCode, Boolean assignedProfiles, Boolean assignedPermissions, Boolean assignedUserGroups, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (assignedProfiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignedProfiles", assignedProfiles));
        }

        if (assignedPermissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignedPermissions", assignedPermissions));
        }

        if (assignedUserGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignedUserGroups", assignedUserGroups));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUsersValidateBeforeCall(String tenantCode, Boolean assignedProfiles, Boolean assignedPermissions, Boolean assignedUserGroups, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        return getAllUsersCall(tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, limit, start, _callback);

    }


    private ApiResponse<AllUsersGetAPIResponseDTO> getAllUsersWithHttpInfo(String tenantCode, Boolean assignedProfiles, Boolean assignedPermissions, Boolean assignedUserGroups, Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = getAllUsersValidateBeforeCall(tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, limit, start, null);
        Type localVarReturnType = new TypeToken<AllUsersGetAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUsersAsync(String tenantCode, Boolean assignedProfiles, Boolean assignedPermissions, Boolean assignedUserGroups, Integer limit, Integer start, final ApiCallback<AllUsersGetAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUsersValidateBeforeCall(tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, limit, start, _callback);
        Type localVarReturnType = new TypeToken<AllUsersGetAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllUsersRequestBuilder {
        private String tenantCode;
        private Boolean assignedProfiles;
        private Boolean assignedPermissions;
        private Boolean assignedUserGroups;
        private Integer limit;
        private Integer start;

        private GetAllUsersRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve a list of users from. (optional)
         * @return GetAllUsersRequestBuilder
         */
        public GetAllUsersRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set assignedProfiles
         * @param assignedProfiles If true, the response returns a list of the user&#39;s assigned profiles. (optional)
         * @return GetAllUsersRequestBuilder
         */
        public GetAllUsersRequestBuilder assignedProfiles(Boolean assignedProfiles) {
            this.assignedProfiles = assignedProfiles;
            return this;
        }
        
        /**
         * Set assignedPermissions
         * @param assignedPermissions If true, the response returns the user&#39;s assigned permissions. (optional)
         * @return GetAllUsersRequestBuilder
         */
        public GetAllUsersRequestBuilder assignedPermissions(Boolean assignedPermissions) {
            this.assignedPermissions = assignedPermissions;
            return this;
        }
        
        /**
         * Set assignedUserGroups
         * @param assignedUserGroups If true, the response returns the user&#39;s assigned user groups. (optional)
         * @return GetAllUsersRequestBuilder
         */
        public GetAllUsersRequestBuilder assignedUserGroups(Boolean assignedUserGroups) {
            this.assignedUserGroups = assignedUserGroups;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results to return. The maximum number of users to retrieve is 1000. (optional)
         * @return GetAllUsersRequestBuilder
         */
        public GetAllUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return GetAllUsersRequestBuilder
         */
        public GetAllUsersRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for getAllUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUsersCall(tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, limit, start, _callback);
        }


        /**
         * Execute getAllUsers request
         * @return AllUsersGetAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public AllUsersGetAPIResponseDTO execute() throws ApiException {
            ApiResponse<AllUsersGetAPIResponseDTO> localVarResp = getAllUsersWithHttpInfo(tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllUsers request with HTTP info returned
         * @return ApiResponse&lt;AllUsersGetAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AllUsersGetAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getAllUsersWithHttpInfo(tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, limit, start);
        }

        /**
         * Execute getAllUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AllUsersGetAPIResponseDTO> _callback) throws ApiException {
            return getAllUsersAsync(tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, limit, start, _callback);
        }
    }

    /**
     * Retrieve a list of all users
     * This API allows you to retrieve the full list of users and their current states.
     * @return GetAllUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetAllUsersRequestBuilder getAllUsers() throws IllegalArgumentException {
        return new GetAllUsersRequestBuilder();
    }
    private okhttp3.Call getApplicationLogsXLSXCall(String startTime, String endTime, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/users/reports/application-logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/vnd.ms-excel",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationLogsXLSXValidateBeforeCall(String startTime, String endTime, String tenantCode, final ApiCallback _callback) throws ApiException {
        return getApplicationLogsXLSXCall(startTime, endTime, tenantCode, _callback);

    }


    private ApiResponse<File> getApplicationLogsXLSXWithHttpInfo(String startTime, String endTime, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = getApplicationLogsXLSXValidateBeforeCall(startTime, endTime, tenantCode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApplicationLogsXLSXAsync(String startTime, String endTime, String tenantCode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationLogsXLSXValidateBeforeCall(startTime, endTime, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApplicationLogsXLSXRequestBuilder {
        private String startTime;
        private String endTime;
        private String tenantCode;

        private GetApplicationLogsXLSXRequestBuilder() {
        }

        /**
         * Set startTime
         * @param startTime An inclusive date-time to start retrieving Application Logs from. (optional)
         * @return GetApplicationLogsXLSXRequestBuilder
         */
        public GetApplicationLogsXLSXRequestBuilder startTime(String startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime An exclusive date-time to stop retrieving Application Logs from. (optional)
         * @return GetApplicationLogsXLSXRequestBuilder
         */
        public GetApplicationLogsXLSXRequestBuilder endTime(String endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve Application Logs from. (optional)
         * @return GetApplicationLogsXLSXRequestBuilder
         */
        public GetApplicationLogsXLSXRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for getApplicationLogsXLSX
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApplicationLogsXLSXCall(startTime, endTime, tenantCode, _callback);
        }


        /**
         * Execute getApplicationLogsXLSX request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getApplicationLogsXLSXWithHttpInfo(startTime, endTime, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApplicationLogsXLSX request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getApplicationLogsXLSXWithHttpInfo(startTime, endTime, tenantCode);
        }

        /**
         * Execute getApplicationLogsXLSX request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getApplicationLogsXLSXAsync(startTime, endTime, tenantCode, _callback);
        }
    }

    /**
     * Retrieve the Application Logs
     * This API allows you to export the Application Logs for a tenant. The Application Logs track information about your  users and how they are using the application. Performing regular audits will help you identify potential security  issues and keep your data safe. As part of user management, download the Application Logs to monitor user activity  and logon events to ensure your users are performing authorized activities.   Administrating tenant users can export application logs for the administrating tenant and the analytic tenants  those users belong to.
     * @return GetApplicationLogsXLSXRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetApplicationLogsXLSXRequestBuilder getApplicationLogsXLSX() throws IllegalArgumentException {
        return new GetApplicationLogsXLSXRequestBuilder();
    }
    private okhttp3.Call getDataSecurityReportXLSXCall(String userId, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/users/{userId}/reports/data-security"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/vnd.ms-excel",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataSecurityReportXLSXValidateBeforeCall(String userId, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getDataSecurityReportXLSX(Async)");
        }

        return getDataSecurityReportXLSXCall(userId, tenantCode, _callback);

    }


    private ApiResponse<File> getDataSecurityReportXLSXWithHttpInfo(String userId, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = getDataSecurityReportXLSXValidateBeforeCall(userId, tenantCode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataSecurityReportXLSXAsync(String userId, String tenantCode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataSecurityReportXLSXValidateBeforeCall(userId, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataSecurityReportXLSXRequestBuilder {
        private final String userId;
        private String tenantCode;

        private GetDataSecurityReportXLSXRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve the Data Security Report from. (optional)
         * @return GetDataSecurityReportXLSXRequestBuilder
         */
        public GetDataSecurityReportXLSXRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for getDataSecurityReportXLSX
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataSecurityReportXLSXCall(userId, tenantCode, _callback);
        }


        /**
         * Execute getDataSecurityReportXLSX request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getDataSecurityReportXLSXWithHttpInfo(userId, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDataSecurityReportXLSX request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getDataSecurityReportXLSXWithHttpInfo(userId, tenantCode);
        }

        /**
         * Execute getDataSecurityReportXLSX request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getDataSecurityReportXLSXAsync(userId, tenantCode, _callback);
        }
    }

    /**
     * Retrieve the Data Security Report
     * This API allows you to export the data security report of a user. The Data Security Report provides information  about a specific user to see which populations and properties that user has access to as a result of the  permissions assigned to them.   Administrating tenant users can export the report for users in the administrating tenant and the analytic  tenants those users belong to.
     * @param userId The ID of the user to retrieve the report for. (required)
     * @return GetDataSecurityReportXLSXRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetDataSecurityReportXLSXRequestBuilder getDataSecurityReportXLSX(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetDataSecurityReportXLSXRequestBuilder(userId);
    }
    private okhttp3.Call getPermissionAssignedUsersCall(String permissionId, Boolean includeUserGroups, String tenantFilter, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/permissions/{permissionId}/users"
            .replace("{" + "permissionId" + "}", localVarApiClient.escapeString(permissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeUserGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUserGroups", includeUserGroups));
        }

        if (tenantFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantFilter", tenantFilter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermissionAssignedUsersValidateBeforeCall(String permissionId, Boolean includeUserGroups, String tenantFilter, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'permissionId' is set
        if (permissionId == null) {
            throw new ApiException("Missing the required parameter 'permissionId' when calling getPermissionAssignedUsers(Async)");
        }

        return getPermissionAssignedUsersCall(permissionId, includeUserGroups, tenantFilter, limit, start, _callback);

    }


    private ApiResponse<PermissionAssignedUsersDTO> getPermissionAssignedUsersWithHttpInfo(String permissionId, Boolean includeUserGroups, String tenantFilter, Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = getPermissionAssignedUsersValidateBeforeCall(permissionId, includeUserGroups, tenantFilter, limit, start, null);
        Type localVarReturnType = new TypeToken<PermissionAssignedUsersDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPermissionAssignedUsersAsync(String permissionId, Boolean includeUserGroups, String tenantFilter, Integer limit, Integer start, final ApiCallback<PermissionAssignedUsersDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermissionAssignedUsersValidateBeforeCall(permissionId, includeUserGroups, tenantFilter, limit, start, _callback);
        Type localVarReturnType = new TypeToken<PermissionAssignedUsersDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPermissionAssignedUsersRequestBuilder {
        private final String permissionId;
        private Boolean includeUserGroups;
        private String tenantFilter;
        private Integer limit;
        private Integer start;

        private GetPermissionAssignedUsersRequestBuilder(String permissionId) {
            this.permissionId = permissionId;
        }

        /**
         * Set includeUserGroups
         * @param includeUserGroups If true, the response returns a list of all users that are assigned the permission, including users that are  assigned the permission through a user group. If false, the response returns a list of the users that are directly assigned the permission. (optional)
         * @return GetPermissionAssignedUsersRequestBuilder
         */
        public GetPermissionAssignedUsersRequestBuilder includeUserGroups(Boolean includeUserGroups) {
            this.includeUserGroups = includeUserGroups;
            return this;
        }
        
        /**
         * Set tenantFilter
         * @param tenantFilter Specify the tenant to retrieve the list of users from. (optional)
         * @return GetPermissionAssignedUsersRequestBuilder
         */
        public GetPermissionAssignedUsersRequestBuilder tenantFilter(String tenantFilter) {
            this.tenantFilter = tenantFilter;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results to return. The maximum number of tenants to retrieve is 100. (optional)
         * @return GetPermissionAssignedUsersRequestBuilder
         */
        public GetPermissionAssignedUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return GetPermissionAssignedUsersRequestBuilder
         */
        public GetPermissionAssignedUsersRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for getPermissionAssignedUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPermissionAssignedUsersCall(permissionId, includeUserGroups, tenantFilter, limit, start, _callback);
        }


        /**
         * Execute getPermissionAssignedUsers request
         * @return PermissionAssignedUsersDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PermissionAssignedUsersDTO execute() throws ApiException {
            ApiResponse<PermissionAssignedUsersDTO> localVarResp = getPermissionAssignedUsersWithHttpInfo(permissionId, includeUserGroups, tenantFilter, limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPermissionAssignedUsers request with HTTP info returned
         * @return ApiResponse&lt;PermissionAssignedUsersDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionAssignedUsersDTO> executeWithHttpInfo() throws ApiException {
            return getPermissionAssignedUsersWithHttpInfo(permissionId, includeUserGroups, tenantFilter, limit, start);
        }

        /**
         * Execute getPermissionAssignedUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionAssignedUsersDTO> _callback) throws ApiException {
            return getPermissionAssignedUsersAsync(permissionId, includeUserGroups, tenantFilter, limit, start, _callback);
        }
    }

    /**
     * Retrieve users that are assigned a specific permission
     * This API allows you to retrieve all the users that are assigned a specified permission. You must know the ID  of the permission you want to retrieve users for.
     * @param permissionId The unique identifier of the permission you want to retrieve users for. (required)
     * @return GetPermissionAssignedUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetPermissionAssignedUsersRequestBuilder getPermissionAssignedUsers(String permissionId) throws IllegalArgumentException {
        if (permissionId == null) throw new IllegalArgumentException("\"permissionId\" is required but got null");
            

        return new GetPermissionAssignedUsersRequestBuilder(permissionId);
    }
    private okhttp3.Call getProfileAssignmentsXLSXCall(String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/users/reports/profile-assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/vnd.ms-excel",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileAssignmentsXLSXValidateBeforeCall(String tenantCode, final ApiCallback _callback) throws ApiException {
        return getProfileAssignmentsXLSXCall(tenantCode, _callback);

    }


    private ApiResponse<File> getProfileAssignmentsXLSXWithHttpInfo(String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = getProfileAssignmentsXLSXValidateBeforeCall(tenantCode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProfileAssignmentsXLSXAsync(String tenantCode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileAssignmentsXLSXValidateBeforeCall(tenantCode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProfileAssignmentsXLSXRequestBuilder {
        private String tenantCode;

        private GetProfileAssignmentsXLSXRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve profile assignments from. (optional)
         * @return GetProfileAssignmentsXLSXRequestBuilder
         */
        public GetProfileAssignmentsXLSXRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for getProfileAssignmentsXLSX
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProfileAssignmentsXLSXCall(tenantCode, _callback);
        }


        /**
         * Execute getProfileAssignmentsXLSX request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getProfileAssignmentsXLSXWithHttpInfo(tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProfileAssignmentsXLSX request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getProfileAssignmentsXLSXWithHttpInfo(tenantCode);
        }

        /**
         * Execute getProfileAssignmentsXLSX request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getProfileAssignmentsXLSXAsync(tenantCode, _callback);
        }
    }

    /**
     * Retrieve user profile assignments in XLSX format
     * This API allows you to export the profiles assigned to each user. This report details the profiles assigned to  each user and the profile validity period.   Administrating tenant users can export profile assignments for the administrating tenant and the analytic tenants  those users belong to.
     * @return GetProfileAssignmentsXLSXRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetProfileAssignmentsXLSXRequestBuilder getProfileAssignmentsXLSX() throws IllegalArgumentException {
        return new GetProfileAssignmentsXLSXRequestBuilder();
    }
    private okhttp3.Call getUserDetailCall(String userId, String tenantCode, Boolean assignedProfiles, Boolean assignedPermissions, Boolean assignedUserGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (assignedProfiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignedProfiles", assignedProfiles));
        }

        if (assignedPermissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignedPermissions", assignedPermissions));
        }

        if (assignedUserGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignedUserGroups", assignedUserGroups));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserDetailValidateBeforeCall(String userId, String tenantCode, Boolean assignedProfiles, Boolean assignedPermissions, Boolean assignedUserGroups, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserDetail(Async)");
        }

        return getUserDetailCall(userId, tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, _callback);

    }


    private ApiResponse<UserGetAPIResponseDTO> getUserDetailWithHttpInfo(String userId, String tenantCode, Boolean assignedProfiles, Boolean assignedPermissions, Boolean assignedUserGroups) throws ApiException {
        okhttp3.Call localVarCall = getUserDetailValidateBeforeCall(userId, tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, null);
        Type localVarReturnType = new TypeToken<UserGetAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserDetailAsync(String userId, String tenantCode, Boolean assignedProfiles, Boolean assignedPermissions, Boolean assignedUserGroups, final ApiCallback<UserGetAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserDetailValidateBeforeCall(userId, tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, _callback);
        Type localVarReturnType = new TypeToken<UserGetAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserDetailRequestBuilder {
        private final String userId;
        private String tenantCode;
        private Boolean assignedProfiles;
        private Boolean assignedPermissions;
        private Boolean assignedUserGroups;

        private GetUserDetailRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve a user from. (optional)
         * @return GetUserDetailRequestBuilder
         */
        public GetUserDetailRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set assignedProfiles
         * @param assignedProfiles If true, the response returns a list of the user&#39;s assigned profiles. (optional)
         * @return GetUserDetailRequestBuilder
         */
        public GetUserDetailRequestBuilder assignedProfiles(Boolean assignedProfiles) {
            this.assignedProfiles = assignedProfiles;
            return this;
        }
        
        /**
         * Set assignedPermissions
         * @param assignedPermissions If true, the response returns the user&#39;s assigned permissions. (optional)
         * @return GetUserDetailRequestBuilder
         */
        public GetUserDetailRequestBuilder assignedPermissions(Boolean assignedPermissions) {
            this.assignedPermissions = assignedPermissions;
            return this;
        }
        
        /**
         * Set assignedUserGroups
         * @param assignedUserGroups If true, the response returns the user&#39;s assigned user groups. (optional)
         * @return GetUserDetailRequestBuilder
         */
        public GetUserDetailRequestBuilder assignedUserGroups(Boolean assignedUserGroups) {
            this.assignedUserGroups = assignedUserGroups;
            return this;
        }
        
        /**
         * Build call for getUserDetail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserDetailCall(userId, tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, _callback);
        }


        /**
         * Execute getUserDetail request
         * @return UserGetAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public UserGetAPIResponseDTO execute() throws ApiException {
            ApiResponse<UserGetAPIResponseDTO> localVarResp = getUserDetailWithHttpInfo(userId, tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserDetail request with HTTP info returned
         * @return ApiResponse&lt;UserGetAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserGetAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            return getUserDetailWithHttpInfo(userId, tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups);
        }

        /**
         * Execute getUserDetail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserGetAPIResponseDTO> _callback) throws ApiException {
            return getUserDetailAsync(userId, tenantCode, assignedProfiles, assignedPermissions, assignedUserGroups, _callback);
        }
    }

    /**
     * Retrieve a user&#39;s details
     * This API allows you to retrieve all details for a specified user.
     * @param userId The ID of the user you want to retrieve. (required)
     * @return GetUserDetailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserDetailRequestBuilder getUserDetail(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetUserDetailRequestBuilder(userId);
    }
    private okhttp3.Call getUserGroupUsersCall(String userGroupId, String tenantFilter, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/user-groups/{userGroupId}/users"
            .replace("{" + "userGroupId" + "}", localVarApiClient.escapeString(userGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantFilter", tenantFilter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGroupUsersValidateBeforeCall(String userGroupId, String tenantFilter, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException("Missing the required parameter 'userGroupId' when calling getUserGroupUsers(Async)");
        }

        return getUserGroupUsersCall(userGroupId, tenantFilter, limit, start, _callback);

    }


    private ApiResponse<UserGroupsUsersDTO> getUserGroupUsersWithHttpInfo(String userGroupId, String tenantFilter, Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = getUserGroupUsersValidateBeforeCall(userGroupId, tenantFilter, limit, start, null);
        Type localVarReturnType = new TypeToken<UserGroupsUsersDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserGroupUsersAsync(String userGroupId, String tenantFilter, Integer limit, Integer start, final ApiCallback<UserGroupsUsersDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGroupUsersValidateBeforeCall(userGroupId, tenantFilter, limit, start, _callback);
        Type localVarReturnType = new TypeToken<UserGroupsUsersDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserGroupUsersRequestBuilder {
        private final String userGroupId;
        private String tenantFilter;
        private Integer limit;
        private Integer start;

        private GetUserGroupUsersRequestBuilder(String userGroupId) {
            this.userGroupId = userGroupId;
        }

        /**
         * Set tenantFilter
         * @param tenantFilter Specifies the tenant to retrieve the list of users from. (optional)
         * @return GetUserGroupUsersRequestBuilder
         */
        public GetUserGroupUsersRequestBuilder tenantFilter(String tenantFilter) {
            this.tenantFilter = tenantFilter;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results to return. The maximum number of tenants to retrieve is 100. (optional)
         * @return GetUserGroupUsersRequestBuilder
         */
        public GetUserGroupUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return GetUserGroupUsersRequestBuilder
         */
        public GetUserGroupUsersRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for getUserGroupUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserGroupUsersCall(userGroupId, tenantFilter, limit, start, _callback);
        }


        /**
         * Execute getUserGroupUsers request
         * @return UserGroupsUsersDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public UserGroupsUsersDTO execute() throws ApiException {
            ApiResponse<UserGroupsUsersDTO> localVarResp = getUserGroupUsersWithHttpInfo(userGroupId, tenantFilter, limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserGroupUsers request with HTTP info returned
         * @return ApiResponse&lt;UserGroupsUsersDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserGroupsUsersDTO> executeWithHttpInfo() throws ApiException {
            return getUserGroupUsersWithHttpInfo(userGroupId, tenantFilter, limit, start);
        }

        /**
         * Execute getUserGroupUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserGroupsUsersDTO> _callback) throws ApiException {
            return getUserGroupUsersAsync(userGroupId, tenantFilter, limit, start, _callback);
        }
    }

    /**
     * Retrieve a list of user group users
     * This API allows you to retrieve the list of users explicitly assigned to a user group. Users that are implicitly  included in the user group through the user group&#39;s dynamic filters are not returned by this endpoint.
     * @param userGroupId The ID of user group. (required)
     * @return GetUserGroupUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserGroupUsersRequestBuilder getUserGroupUsers(String userGroupId) throws IllegalArgumentException {
        if (userGroupId == null) throw new IllegalArgumentException("\"userGroupId\" is required but got null");
            

        return new GetUserGroupUsersRequestBuilder(userGroupId);
    }
    private okhttp3.Call getUserPermissionsXLSXCall(String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/admin/users/reports/permission-assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/vnd.ms-excel",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPermissionsXLSXValidateBeforeCall(String tenantCode, final ApiCallback _callback) throws ApiException {
        return getUserPermissionsXLSXCall(tenantCode, _callback);

    }


    private ApiResponse<File> getUserPermissionsXLSXWithHttpInfo(String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = getUserPermissionsXLSXValidateBeforeCall(tenantCode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPermissionsXLSXAsync(String tenantCode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPermissionsXLSXValidateBeforeCall(tenantCode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPermissionsXLSXRequestBuilder {
        private String tenantCode;

        private GetUserPermissionsXLSXRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to retrieve the permission assignments report from. (optional)
         * @return GetUserPermissionsXLSXRequestBuilder
         */
        public GetUserPermissionsXLSXRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for getUserPermissionsXLSX
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPermissionsXLSXCall(tenantCode, _callback);
        }


        /**
         * Execute getUserPermissionsXLSX request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getUserPermissionsXLSXWithHttpInfo(tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPermissionsXLSX request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getUserPermissionsXLSXWithHttpInfo(tenantCode);
        }

        /**
         * Execute getUserPermissionsXLSX request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getUserPermissionsXLSXAsync(tenantCode, _callback);
        }
    }

    /**
     * Retrieve user permissions in XLSX format
     * This API allows you to export the user permission assignments for a tenant. The permission assignments report  provides a summary of the permissions your users have been assigned and how each permission is being used across  your user base, as well as the users that do not have any permissions assigned to them.   Administrating tenant users can export permission assignments for the administrating tenant and the analytic  tenants those users belong to.
     * @return GetUserPermissionsXLSXRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An XLSX file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPermissionsXLSXRequestBuilder getUserPermissionsXLSX() throws IllegalArgumentException {
        return new GetUserPermissionsXLSXRequestBuilder();
    }
    private okhttp3.Call removePermissionsCall(AssignRevokePermissionsRequest assignRevokePermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignRevokePermissionsRequest;

        // create path and map variables
        String localVarPath = "/v1/admin/permissions/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePermissionsValidateBeforeCall(AssignRevokePermissionsRequest assignRevokePermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assignRevokePermissionsRequest' is set
        if (assignRevokePermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'assignRevokePermissionsRequest' when calling removePermissions(Async)");
        }

        return removePermissionsCall(assignRevokePermissionsRequest, _callback);

    }


    private ApiResponse<AssignRevokePermissionsResponseDTO> removePermissionsWithHttpInfo(AssignRevokePermissionsRequest assignRevokePermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = removePermissionsValidateBeforeCall(assignRevokePermissionsRequest, null);
        Type localVarReturnType = new TypeToken<AssignRevokePermissionsResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removePermissionsAsync(AssignRevokePermissionsRequest assignRevokePermissionsRequest, final ApiCallback<AssignRevokePermissionsResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePermissionsValidateBeforeCall(assignRevokePermissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<AssignRevokePermissionsResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemovePermissionsRequestBuilder {
        private List<Permission> permissions;

        private RemovePermissionsRequestBuilder() {
        }

        /**
         * Set permissions
         * @param permissions A list of objects representing the permissions to assign to or remove from users. (optional)
         * @return RemovePermissionsRequestBuilder
         */
        public RemovePermissionsRequestBuilder permissions(List<Permission> permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Build call for removePermissions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AssignRevokePermissionsRequest assignRevokePermissionsRequest = buildBodyParams();
            return removePermissionsCall(assignRevokePermissionsRequest, _callback);
        }

        private AssignRevokePermissionsRequest buildBodyParams() {
            AssignRevokePermissionsRequest assignRevokePermissionsRequest = new AssignRevokePermissionsRequest();
            assignRevokePermissionsRequest.permissions(this.permissions);
            return assignRevokePermissionsRequest;
        }

        /**
         * Execute removePermissions request
         * @return AssignRevokePermissionsResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public AssignRevokePermissionsResponseDTO execute() throws ApiException {
            AssignRevokePermissionsRequest assignRevokePermissionsRequest = buildBodyParams();
            ApiResponse<AssignRevokePermissionsResponseDTO> localVarResp = removePermissionsWithHttpInfo(assignRevokePermissionsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removePermissions request with HTTP info returned
         * @return ApiResponse&lt;AssignRevokePermissionsResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssignRevokePermissionsResponseDTO> executeWithHttpInfo() throws ApiException {
            AssignRevokePermissionsRequest assignRevokePermissionsRequest = buildBodyParams();
            return removePermissionsWithHttpInfo(assignRevokePermissionsRequest);
        }

        /**
         * Execute removePermissions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssignRevokePermissionsResponseDTO> _callback) throws ApiException {
            AssignRevokePermissionsRequest assignRevokePermissionsRequest = buildBodyParams();
            return removePermissionsAsync(assignRevokePermissionsRequest, _callback);
        }
    }

    /**
     * Remove permissions from users
     * This API allows you to remove a permission from specific users. Administrating tenant users can remove permissions  from users in the administrating tenant and in the analytic tenants those users belong to.
     * @param assignRevokePermissionsRequest  (required)
     * @return RemovePermissionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RemovePermissionsRequestBuilder removePermissions() throws IllegalArgumentException {
        return new RemovePermissionsRequestBuilder();
    }
    private okhttp3.Call removeUsersFromUserGroupCall(UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersToUserGroupsRequestDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/user-groups/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUsersFromUserGroupValidateBeforeCall(UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersToUserGroupsRequestDTO' is set
        if (usersToUserGroupsRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'usersToUserGroupsRequestDTO' when calling removeUsersFromUserGroup(Async)");
        }

        return removeUsersFromUserGroupCall(usersToUserGroupsRequestDTO, _callback);

    }


    private ApiResponse<SecurityAssignmentResponseDTO> removeUsersFromUserGroupWithHttpInfo(UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = removeUsersFromUserGroupValidateBeforeCall(usersToUserGroupsRequestDTO, null);
        Type localVarReturnType = new TypeToken<SecurityAssignmentResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeUsersFromUserGroupAsync(UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO, final ApiCallback<SecurityAssignmentResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUsersFromUserGroupValidateBeforeCall(usersToUserGroupsRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<SecurityAssignmentResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveUsersFromUserGroupRequestBuilder {
        private List<UsersToUserGroupRequestDTO> userGroups;

        private RemoveUsersFromUserGroupRequestBuilder() {
        }

        /**
         * Set userGroups
         * @param userGroups A list of objects representing the user groups and users to assign or remove. (optional)
         * @return RemoveUsersFromUserGroupRequestBuilder
         */
        public RemoveUsersFromUserGroupRequestBuilder userGroups(List<UsersToUserGroupRequestDTO> userGroups) {
            this.userGroups = userGroups;
            return this;
        }
        
        /**
         * Build call for removeUsersFromUserGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO = buildBodyParams();
            return removeUsersFromUserGroupCall(usersToUserGroupsRequestDTO, _callback);
        }

        private UsersToUserGroupsRequestDTO buildBodyParams() {
            UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO = new UsersToUserGroupsRequestDTO();
            usersToUserGroupsRequestDTO.userGroups(this.userGroups);
            return usersToUserGroupsRequestDTO;
        }

        /**
         * Execute removeUsersFromUserGroup request
         * @return SecurityAssignmentResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public SecurityAssignmentResponseDTO execute() throws ApiException {
            UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO = buildBodyParams();
            ApiResponse<SecurityAssignmentResponseDTO> localVarResp = removeUsersFromUserGroupWithHttpInfo(usersToUserGroupsRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeUsersFromUserGroup request with HTTP info returned
         * @return ApiResponse&lt;SecurityAssignmentResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SecurityAssignmentResponseDTO> executeWithHttpInfo() throws ApiException {
            UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO = buildBodyParams();
            return removeUsersFromUserGroupWithHttpInfo(usersToUserGroupsRequestDTO);
        }

        /**
         * Execute removeUsersFromUserGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SecurityAssignmentResponseDTO> _callback) throws ApiException {
            UsersToUserGroupsRequestDTO usersToUserGroupsRequestDTO = buildBodyParams();
            return removeUsersFromUserGroupAsync(usersToUserGroupsRequestDTO, _callback);
        }
    }

    /**
     * Remove users from user groups
     * This API allows you to remove users from specific user groups.
     * @param usersToUserGroupsRequestDTO  (required)
     * @return RemoveUsersFromUserGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveUsersFromUserGroupRequestBuilder removeUsersFromUserGroup() throws IllegalArgumentException {
        return new RemoveUsersFromUserGroupRequestBuilder();
    }
    private okhttp3.Call revokePermissionsFromUserGroupsCall(PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionsToUserGroupsRequestDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/user-groups/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokePermissionsFromUserGroupsValidateBeforeCall(PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'permissionsToUserGroupsRequestDTO' is set
        if (permissionsToUserGroupsRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'permissionsToUserGroupsRequestDTO' when calling revokePermissionsFromUserGroups(Async)");
        }

        return revokePermissionsFromUserGroupsCall(permissionsToUserGroupsRequestDTO, _callback);

    }


    private ApiResponse<PermissionsToUserGroupForTenantDTO> revokePermissionsFromUserGroupsWithHttpInfo(PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = revokePermissionsFromUserGroupsValidateBeforeCall(permissionsToUserGroupsRequestDTO, null);
        Type localVarReturnType = new TypeToken<PermissionsToUserGroupForTenantDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call revokePermissionsFromUserGroupsAsync(PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO, final ApiCallback<PermissionsToUserGroupForTenantDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokePermissionsFromUserGroupsValidateBeforeCall(permissionsToUserGroupsRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<PermissionsToUserGroupForTenantDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RevokePermissionsFromUserGroupsRequestBuilder {
        private List<PermissionsToUserGroupRequestDTO> userGroups;

        private RevokePermissionsFromUserGroupsRequestBuilder() {
        }

        /**
         * Set userGroups
         * @param userGroups A list of objects representing the user groups and permissions to assign or remove. (optional)
         * @return RevokePermissionsFromUserGroupsRequestBuilder
         */
        public RevokePermissionsFromUserGroupsRequestBuilder userGroups(List<PermissionsToUserGroupRequestDTO> userGroups) {
            this.userGroups = userGroups;
            return this;
        }
        
        /**
         * Build call for revokePermissionsFromUserGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO = buildBodyParams();
            return revokePermissionsFromUserGroupsCall(permissionsToUserGroupsRequestDTO, _callback);
        }

        private PermissionsToUserGroupsRequestDTO buildBodyParams() {
            PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO = new PermissionsToUserGroupsRequestDTO();
            permissionsToUserGroupsRequestDTO.userGroups(this.userGroups);
            return permissionsToUserGroupsRequestDTO;
        }

        /**
         * Execute revokePermissionsFromUserGroups request
         * @return PermissionsToUserGroupForTenantDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public PermissionsToUserGroupForTenantDTO execute() throws ApiException {
            PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO = buildBodyParams();
            ApiResponse<PermissionsToUserGroupForTenantDTO> localVarResp = revokePermissionsFromUserGroupsWithHttpInfo(permissionsToUserGroupsRequestDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute revokePermissionsFromUserGroups request with HTTP info returned
         * @return ApiResponse&lt;PermissionsToUserGroupForTenantDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PermissionsToUserGroupForTenantDTO> executeWithHttpInfo() throws ApiException {
            PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO = buildBodyParams();
            return revokePermissionsFromUserGroupsWithHttpInfo(permissionsToUserGroupsRequestDTO);
        }

        /**
         * Execute revokePermissionsFromUserGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PermissionsToUserGroupForTenantDTO> _callback) throws ApiException {
            PermissionsToUserGroupsRequestDTO permissionsToUserGroupsRequestDTO = buildBodyParams();
            return revokePermissionsFromUserGroupsAsync(permissionsToUserGroupsRequestDTO, _callback);
        }
    }

    /**
     * Remove permissions from user groups
     * This API allows you to remove a permission from specific user groups.
     * @param permissionsToUserGroupsRequestDTO  (required)
     * @return RevokePermissionsFromUserGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RevokePermissionsFromUserGroupsRequestBuilder revokePermissionsFromUserGroups() throws IllegalArgumentException {
        return new RevokePermissionsFromUserGroupsRequestBuilder();
    }
    private okhttp3.Call updateUserCall(String userId, UserUpdateAPIRequestDTO userUpdateAPIRequestDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userUpdateAPIRequestDTO;

        // create path and map variables
        String localVarPath = "/v1/admin/users/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String userId, UserUpdateAPIRequestDTO userUpdateAPIRequestDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }

        // verify the required parameter 'userUpdateAPIRequestDTO' is set
        if (userUpdateAPIRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'userUpdateAPIRequestDTO' when calling updateUser(Async)");
        }

        return updateUserCall(userId, userUpdateAPIRequestDTO, tenantCode, _callback);

    }


    private ApiResponse<UserUpdateAPIRequestDTO> updateUserWithHttpInfo(String userId, UserUpdateAPIRequestDTO userUpdateAPIRequestDTO, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userId, userUpdateAPIRequestDTO, tenantCode, null);
        Type localVarReturnType = new TypeToken<UserUpdateAPIRequestDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserAsync(String userId, UserUpdateAPIRequestDTO userUpdateAPIRequestDTO, String tenantCode, final ApiCallback<UserUpdateAPIRequestDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userId, userUpdateAPIRequestDTO, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<UserUpdateAPIRequestDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserRequestBuilder {
        private final String userId;
        private String displayName;
        private String employeeId;
        private String accountEnabled;
        private String email;
        private String tenantCode;

        private UpdateUserRequestBuilder(String userId) {
            this.userId = userId;
        }

        /**
         * Set displayName
         * @param displayName An identifiable name to display within Visier. For example, \\\&quot;John Smith\\\&quot;. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId If applicable, and if available, the user employee ID in the data. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set accountEnabled
         * @param accountEnabled If true, the user account is enabled. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder accountEnabled(String accountEnabled) {
            this.accountEnabled = accountEnabled;
            return this;
        }
        
        /**
         * Set email
         * @param email The user&#39;s email address. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to update a user in. (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for updateUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UserUpdateAPIRequestDTO userUpdateAPIRequestDTO = buildBodyParams();
            return updateUserCall(userId, userUpdateAPIRequestDTO, tenantCode, _callback);
        }

        private UserUpdateAPIRequestDTO buildBodyParams() {
            UserUpdateAPIRequestDTO userUpdateAPIRequestDTO = new UserUpdateAPIRequestDTO();
            userUpdateAPIRequestDTO.displayName(this.displayName);
            userUpdateAPIRequestDTO.employeeId(this.employeeId);
            userUpdateAPIRequestDTO.accountEnabled(this.accountEnabled);
            userUpdateAPIRequestDTO.email(this.email);
            return userUpdateAPIRequestDTO;
        }

        /**
         * Execute updateUser request
         * @return UserUpdateAPIRequestDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public UserUpdateAPIRequestDTO execute() throws ApiException {
            UserUpdateAPIRequestDTO userUpdateAPIRequestDTO = buildBodyParams();
            ApiResponse<UserUpdateAPIRequestDTO> localVarResp = updateUserWithHttpInfo(userId, userUpdateAPIRequestDTO, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUser request with HTTP info returned
         * @return ApiResponse&lt;UserUpdateAPIRequestDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserUpdateAPIRequestDTO> executeWithHttpInfo() throws ApiException {
            UserUpdateAPIRequestDTO userUpdateAPIRequestDTO = buildBodyParams();
            return updateUserWithHttpInfo(userId, userUpdateAPIRequestDTO, tenantCode);
        }

        /**
         * Execute updateUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserUpdateAPIRequestDTO> _callback) throws ApiException {
            UserUpdateAPIRequestDTO userUpdateAPIRequestDTO = buildBodyParams();
            return updateUserAsync(userId, userUpdateAPIRequestDTO, tenantCode, _callback);
        }
    }

    /**
     * Update a user
     * This API allows you to update an existing user&#39;s information, such as their display name or if the user is enabled in Visier.
     * @param userId The ID of the user you want to update. (required)
     * @param userUpdateAPIRequestDTO  (required)
     * @return UpdateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserRequestBuilder updateUser(String userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UpdateUserRequestBuilder(userId);
    }
}
