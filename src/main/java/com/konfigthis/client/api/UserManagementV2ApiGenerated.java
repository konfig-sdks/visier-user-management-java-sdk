/*
 * Visier User Management APIs
 * Visier APIs for managing users within an organization
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.UserCreationAPIRequestDTO;
import com.konfigthis.client.model.UsersAPIResponseDTO;
import com.konfigthis.client.model.UsersCreationAPIRequestDTO;
import com.konfigthis.client.model.UsersDeleteAPIRequestDTO;
import com.konfigthis.client.model.UsersUpdateAPIRequestDTO;
import com.konfigthis.client.model.UsersUpdateAPIUserDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserManagementV2ApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserManagementV2ApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UserManagementV2ApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addUsersCall(UsersCreationAPIRequestDTO usersCreationAPIRequestDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersCreationAPIRequestDTO;

        // create path and map variables
        String localVarPath = "/v2/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUsersValidateBeforeCall(UsersCreationAPIRequestDTO usersCreationAPIRequestDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersCreationAPIRequestDTO' is set
        if (usersCreationAPIRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'usersCreationAPIRequestDTO' when calling addUsers(Async)");
        }

        return addUsersCall(usersCreationAPIRequestDTO, tenantCode, _callback);

    }


    private ApiResponse<UsersAPIResponseDTO> addUsersWithHttpInfo(UsersCreationAPIRequestDTO usersCreationAPIRequestDTO, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = addUsersValidateBeforeCall(usersCreationAPIRequestDTO, tenantCode, null);
        Type localVarReturnType = new TypeToken<UsersAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addUsersAsync(UsersCreationAPIRequestDTO usersCreationAPIRequestDTO, String tenantCode, final ApiCallback<UsersAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUsersValidateBeforeCall(usersCreationAPIRequestDTO, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<UsersAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddUsersRequestBuilder {
        private List<UserCreationAPIRequestDTO> users;
        private String tenantCode;

        private AddUsersRequestBuilder() {
        }

        /**
         * Set users
         * @param users A list of objects representing users to create. (optional)
         * @return AddUsersRequestBuilder
         */
        public AddUsersRequestBuilder users(List<UserCreationAPIRequestDTO> users) {
            this.users = users;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to create a user in. (optional)
         * @return AddUsersRequestBuilder
         */
        public AddUsersRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for addUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersCreationAPIRequestDTO usersCreationAPIRequestDTO = buildBodyParams();
            return addUsersCall(usersCreationAPIRequestDTO, tenantCode, _callback);
        }

        private UsersCreationAPIRequestDTO buildBodyParams() {
            UsersCreationAPIRequestDTO usersCreationAPIRequestDTO = new UsersCreationAPIRequestDTO();
            usersCreationAPIRequestDTO.users(this.users);
            return usersCreationAPIRequestDTO;
        }

        /**
         * Execute addUsers request
         * @return UsersAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersAPIResponseDTO execute() throws ApiException {
            UsersCreationAPIRequestDTO usersCreationAPIRequestDTO = buildBodyParams();
            ApiResponse<UsersAPIResponseDTO> localVarResp = addUsersWithHttpInfo(usersCreationAPIRequestDTO, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addUsers request with HTTP info returned
         * @return ApiResponse&lt;UsersAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            UsersCreationAPIRequestDTO usersCreationAPIRequestDTO = buildBodyParams();
            return addUsersWithHttpInfo(usersCreationAPIRequestDTO, tenantCode);
        }

        /**
         * Execute addUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersAPIResponseDTO> _callback) throws ApiException {
            UsersCreationAPIRequestDTO usersCreationAPIRequestDTO = buildBodyParams();
            return addUsersAsync(usersCreationAPIRequestDTO, tenantCode, _callback);
        }
    }

    /**
     * Add users
     * This API allows you to create new users. Administrating tenant users can specify the tenant in which to add these users.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param usersCreationAPIRequestDTO  (required)
     * @return AddUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AddUsersRequestBuilder addUsers() throws IllegalArgumentException {
        return new AddUsersRequestBuilder();
    }
    private okhttp3.Call deleteUsersCall(UsersDeleteAPIRequestDTO usersDeleteAPIRequestDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersDeleteAPIRequestDTO;

        // create path and map variables
        String localVarPath = "/v2/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUsersValidateBeforeCall(UsersDeleteAPIRequestDTO usersDeleteAPIRequestDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersDeleteAPIRequestDTO' is set
        if (usersDeleteAPIRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'usersDeleteAPIRequestDTO' when calling deleteUsers(Async)");
        }

        return deleteUsersCall(usersDeleteAPIRequestDTO, tenantCode, _callback);

    }


    private ApiResponse<UsersAPIResponseDTO> deleteUsersWithHttpInfo(UsersDeleteAPIRequestDTO usersDeleteAPIRequestDTO, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = deleteUsersValidateBeforeCall(usersDeleteAPIRequestDTO, tenantCode, null);
        Type localVarReturnType = new TypeToken<UsersAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteUsersAsync(UsersDeleteAPIRequestDTO usersDeleteAPIRequestDTO, String tenantCode, final ApiCallback<UsersAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUsersValidateBeforeCall(usersDeleteAPIRequestDTO, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<UsersAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteUsersRequestBuilder {
        private List<String> userIds;
        private String tenantCode;

        private DeleteUsersRequestBuilder() {
        }

        /**
         * Set userIds
         * @param userIds A list of objects representing users to delete. (optional)
         * @return DeleteUsersRequestBuilder
         */
        public DeleteUsersRequestBuilder userIds(List<String> userIds) {
            this.userIds = userIds;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to delete a user in. (optional)
         * @return DeleteUsersRequestBuilder
         */
        public DeleteUsersRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for deleteUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersDeleteAPIRequestDTO usersDeleteAPIRequestDTO = buildBodyParams();
            return deleteUsersCall(usersDeleteAPIRequestDTO, tenantCode, _callback);
        }

        private UsersDeleteAPIRequestDTO buildBodyParams() {
            UsersDeleteAPIRequestDTO usersDeleteAPIRequestDTO = new UsersDeleteAPIRequestDTO();
            usersDeleteAPIRequestDTO.userIds(this.userIds);
            return usersDeleteAPIRequestDTO;
        }

        /**
         * Execute deleteUsers request
         * @return UsersAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersAPIResponseDTO execute() throws ApiException {
            UsersDeleteAPIRequestDTO usersDeleteAPIRequestDTO = buildBodyParams();
            ApiResponse<UsersAPIResponseDTO> localVarResp = deleteUsersWithHttpInfo(usersDeleteAPIRequestDTO, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteUsers request with HTTP info returned
         * @return ApiResponse&lt;UsersAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            UsersDeleteAPIRequestDTO usersDeleteAPIRequestDTO = buildBodyParams();
            return deleteUsersWithHttpInfo(usersDeleteAPIRequestDTO, tenantCode);
        }

        /**
         * Execute deleteUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersAPIResponseDTO> _callback) throws ApiException {
            UsersDeleteAPIRequestDTO usersDeleteAPIRequestDTO = buildBodyParams();
            return deleteUsersAsync(usersDeleteAPIRequestDTO, tenantCode, _callback);
        }
    }

    /**
     * Delete users
     * This API allows you to delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param usersDeleteAPIRequestDTO  (required)
     * @return DeleteUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUsersRequestBuilder deleteUsers() throws IllegalArgumentException {
        return new DeleteUsersRequestBuilder();
    }
    private okhttp3.Call updateUsersCall(UsersUpdateAPIRequestDTO usersUpdateAPIRequestDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdateAPIRequestDTO;

        // create path and map variables
        String localVarPath = "/v2/admin/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUsersValidateBeforeCall(UsersUpdateAPIRequestDTO usersUpdateAPIRequestDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersUpdateAPIRequestDTO' is set
        if (usersUpdateAPIRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'usersUpdateAPIRequestDTO' when calling updateUsers(Async)");
        }

        return updateUsersCall(usersUpdateAPIRequestDTO, tenantCode, _callback);

    }


    private ApiResponse<UsersAPIResponseDTO> updateUsersWithHttpInfo(UsersUpdateAPIRequestDTO usersUpdateAPIRequestDTO, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = updateUsersValidateBeforeCall(usersUpdateAPIRequestDTO, tenantCode, null);
        Type localVarReturnType = new TypeToken<UsersAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUsersAsync(UsersUpdateAPIRequestDTO usersUpdateAPIRequestDTO, String tenantCode, final ApiCallback<UsersAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUsersValidateBeforeCall(usersUpdateAPIRequestDTO, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<UsersAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUsersRequestBuilder {
        private List<UsersUpdateAPIUserDTO> users;
        private String tenantCode;

        private UpdateUsersRequestBuilder() {
        }

        /**
         * Set users
         * @param users  (optional)
         * @return UpdateUsersRequestBuilder
         */
        public UpdateUsersRequestBuilder users(List<UsersUpdateAPIUserDTO> users) {
            this.users = users;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode Specify the tenant to update a user in. (optional)
         * @return UpdateUsersRequestBuilder
         */
        public UpdateUsersRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for updateUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersUpdateAPIRequestDTO usersUpdateAPIRequestDTO = buildBodyParams();
            return updateUsersCall(usersUpdateAPIRequestDTO, tenantCode, _callback);
        }

        private UsersUpdateAPIRequestDTO buildBodyParams() {
            UsersUpdateAPIRequestDTO usersUpdateAPIRequestDTO = new UsersUpdateAPIRequestDTO();
            usersUpdateAPIRequestDTO.users(this.users);
            return usersUpdateAPIRequestDTO;
        }

        /**
         * Execute updateUsers request
         * @return UsersAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersAPIResponseDTO execute() throws ApiException {
            UsersUpdateAPIRequestDTO usersUpdateAPIRequestDTO = buildBodyParams();
            ApiResponse<UsersAPIResponseDTO> localVarResp = updateUsersWithHttpInfo(usersUpdateAPIRequestDTO, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUsers request with HTTP info returned
         * @return ApiResponse&lt;UsersAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            UsersUpdateAPIRequestDTO usersUpdateAPIRequestDTO = buildBodyParams();
            return updateUsersWithHttpInfo(usersUpdateAPIRequestDTO, tenantCode);
        }

        /**
         * Execute updateUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersAPIResponseDTO> _callback) throws ApiException {
            UsersUpdateAPIRequestDTO usersUpdateAPIRequestDTO = buildBodyParams();
            return updateUsersAsync(usersUpdateAPIRequestDTO, tenantCode, _callback);
        }
    }

    /**
     * Update users
     * This API allows you to update an existing user&#39;s information, such as their display name or if the user is enabled in Visier.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @param usersUpdateAPIRequestDTO  (required)
     * @return UpdateUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUsersRequestBuilder updateUsers() throws IllegalArgumentException {
        return new UpdateUsersRequestBuilder();
    }
}
